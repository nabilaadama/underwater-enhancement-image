# -*- coding: utf-8 -*-
"""image_enhancement.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/172Qylm6Bfd37fitRu123v9fKQi7OBVOW
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt

# ---------------- UTIL ----------------
#Baca gambar
def load_image(path):
    img = cv2.imread(path)
    return cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

#Buat kernel lingkaran
def create_morphological_kernel(size=3):
    """Lingkaran sederhana"""
    kernel = np.zeros((size, size), dtype=np.uint8)
    center = size // 2
    for i in range(size):
        for j in range(size):
            if (i - center)**2 + (j - center)**2 <= center**2:
                kernel[i, j] = 1
    return kernel

#Menerapkan morphological opening
def morphological_opening(gray_img, kernel):
    eroded = cv2.erode(gray_img.astype(np.uint8), kernel, iterations=1)
    opened = cv2.dilate(eroded, kernel, iterations=1)
    return opened.astype(np.uint8)

# ---------------- PROCESSING ----------------
def noise_reduction(image):
    result = image.copy().astype(np.float64)
    kernel = create_morphological_kernel(3)

    for c in range(3):
        channel = image[:, :, c]
        medianed = cv2.medianBlur(channel, 3)
        binary = (medianed > np.mean(medianed)).astype(np.uint8)
        mask = morphological_opening(binary, kernel)
        smoothed = cv2.GaussianBlur(medianed.astype(np.float64), (3, 3), 0.5)
        result[:, :, c] = np.where(mask, smoothed, medianed)

    return np.clip(result, 0, 255).astype(np.uint8)

def color_correction(image):
    img = image.astype(np.float64)

    avg_r = np.mean(img[:, :, 0])
    avg_g = np.mean(img[:, :, 1])
    avg_b = np.mean(img[:, :, 2])

    img[:, :, 0] *= 1.35
    img[:, :, 1] *= 0.70
    img[:, :, 2] *= 0.85

    avg = [np.mean(img[:, :, i]) for i in range(3)]
    gray_avg = np.mean(avg)
    for c in range(3):
        factor = gray_avg / (avg[c] + 1e-5)
        factor = np.clip(factor, 0.85, 1.15)
        img[:, :, c] *= factor

    return np.clip(img, 0, 255).astype(np.uint8)

# ---------------- METRIKS ----------------
def calculate_metrics(original, enhanced):
    orig_gray = np.dot(original[...,:3], [0.2989, 0.5870, 0.1140])
    enh_gray = np.dot(enhanced[...,:3], [0.2989, 0.5870, 0.1140])

    mse = np.mean((orig_gray - enh_gray) ** 2)
    psnr = float('inf') if mse == 0 else 20 * np.log10(255.0 / np.sqrt(mse))

    orig_contrast = np.std(orig_gray)
    enh_contrast = np.std(enh_gray)
    contrast_improvement = enh_contrast / orig_contrast if orig_contrast != 0 else 1

    orig_brightness = np.mean(orig_gray)
    enh_brightness = np.mean(enh_gray)

    def color_balance(img):
        r, g, b = [np.mean(img[:, :, i]) for i in range(3)]
        return np.std([r, g, b])

    orig_balance = color_balance(original)
    enh_balance = color_balance(enhanced)
    balance_improvement = orig_balance / enh_balance if enh_balance != 0 else 1

    return {
        'MSE': mse,
        'PSNR': psnr,
        'Original_Contrast': orig_contrast,
        'Enhanced_Contrast': enh_contrast,
        'Contrast_Improvement': contrast_improvement,
        'Original_Brightness': orig_brightness,
        'Enhanced_Brightness': enh_brightness,
        'Balance_Improvement': balance_improvement
    }

# ---------------- DISPLAY ----------------
def show_results(original, enhanced, metrics):
    fig, axes = plt.subplots(2, 2, figsize=(14, 10))

    # Tampilan gambar
    axes[0, 0].imshow(original)
    axes[0, 0].set_title("Gambar Asli")
    axes[0, 0].axis('off')

    axes[0, 1].imshow(enhanced)
    axes[0, 1].set_title("Gambar Setelah Proses")
    axes[0, 1].axis('off')

    # Histogram warna asli
    for i, color in enumerate(['r', 'g', 'b']):
        axes[1, 0].hist(original[:, :, i].flatten(), bins=50, color=color, alpha=0.6, label=f'Original {color.upper()}')
    axes[1, 0].set_title("Histogram Gambar Asli")
    axes[1, 0].legend()

    # Histogram gambar hasil
    for i, color in enumerate(['r', 'g', 'b']):
        axes[1, 1].hist(enhanced[:, :, i].flatten(), bins=50, color=color, alpha=0.6, label=f'Enhanced {color.upper()}')
    axes[1, 1].set_title("Histogram Gambar Hasil")
    axes[1, 1].legend()

    plt.tight_layout()
    plt.show()

    # Tampilkan metrik
    print("Metrik Teknis:")
    print(f"   • MSE (Mean Square Error): {metrics['MSE']:.2f}")
    print(f"   • PSNR (Peak Signal-to-Noise Ratio): {metrics['PSNR']:.2f} dB")
    print(f"   • Peningkatan Kontras: {metrics['Contrast_Improvement']:.2f}x")
    print(f"   • Peningkatan Color Balance: {metrics['Balance_Improvement']:.2f}x")
    print("\nPerubahan Visual:")
    print(f"   • Brightness Original: {metrics['Original_Brightness']:.1f}")
    print(f"   • Brightness Enhanced: {metrics['Enhanced_Brightness']:.1f}")
    print(f"   • Kontras Original: {metrics['Original_Contrast']:.1f}")
    print(f"   • Kontras Enhanced: {metrics['Enhanced_Contrast']:.1f}")

# ---------------- MAIN ----------------
def main():
    path = 'pari2.jpg'
    original = load_image(path)
    denoised = noise_reduction(original)
    enhanced = color_correction(denoised)
    metrics = calculate_metrics(original, enhanced)
    show_results(original, enhanced, metrics)

if __name__ == '__main__':
    main()